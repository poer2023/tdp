services:
  postgres:
    image: postgres:16-alpine
    container_name: tdp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: tdp
      POSTGRES_PASSWORD: tdp_password
      POSTGRES_DB: tdp
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tdp"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tdp-net

  migrate:
    # 数据库迁移服务 - 一次性运行
    # 使用本地构建的 migrator 阶段镜像，确保内置 Prisma CLI 与 prisma/ 目录
    build:
      context: .
      dockerfile: Dockerfile
      target: migrator
    image: ghcr.io/poer2023/tdp:${IMAGE_TAG:-latest}
    container_name: tdp-migrate
    env_file:
      - .env
    # 若仍使用远程镜像，可挂载 prisma 目录（双保险）
    volumes:
      - ./prisma:/app/prisma:ro
    command: ["sh", "-c", "npx prisma migrate deploy"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tdp-net
    restart: "no"

  # 权限初始化容器 - 修复 Docker volume 权限问题
  # 容器运行用户(node uid=65532) 与 volume 所有者不匹配导致的写入权限问题
  init-volumes:
    image: alpine:latest
    container_name: tdp-init-volumes
    volumes:
      - uploads-data:/data
    command: >
      sh -c "
      echo '==> 初始化上传目录权限...';
      mkdir -p /data/gallery /data/covers;
      chown -R 65532:65532 /data;
      chmod -R 755 /data;
      echo '==> 权限设置完成';
      ls -la /data;
      echo '==> 目录所有者: uid=65532 (node 用户)';
      "
    restart: "no"

  app:
    # 使用 GHCR 预构建镜像；支持通过环境变量覆盖镜像标签
    image: ghcr.io/poer2023/tdp:${IMAGE_TAG:-latest}
    pull_policy: always
    container_name: tdp-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    volumes:
      - uploads-data:/app/public/uploads
    healthcheck:
      test: ["CMD-SHELL", "node /app/docker/healthcheck.js"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      init-volumes:
        condition: service_completed_successfully
    networks:
      - tdp-net
    # 如果需要本地构建，取消下面的注释
    # build:
    #   context: .
    #   dockerfile: Dockerfile

volumes:
  postgres-data:
  uploads-data:

networks:
  tdp-net:
    driver: bridge
