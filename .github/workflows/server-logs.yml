name: Server Logs (manual)

on:
  workflow_dispatch:
    inputs:
      tail:
        description: "Number of log lines to show"
        required: false
        default: "400"
      since:
        description: "Show logs since (e.g., 15m, 1h)"
        required: false
        default: "10m"

permissions:
  contents: read

jobs:
  logs:
    name: Fetch docker compose logs
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      PROJECT_DIR: ${{ secrets.PROJECT_DIR }}
    steps:
      - name: Check required secrets
        id: check
        run: |
          set -euo pipefail
          missing=()
          [[ -n "${SSH_HOST:-}" ]] || missing+=(SSH_HOST)
          [[ -n "${SSH_USER:-}" ]] || missing+=(SSH_USER)
          [[ -n "${{ secrets.SSH_KEY }}" ]] || missing+=(SSH_KEY)
          [[ -n "${PROJECT_DIR:-}" ]] || missing+=(PROJECT_DIR)
          if (( ${#missing[@]} > 0 )); then
            echo "Missing required secrets: ${missing[*]}" >&2
            echo "has_secrets=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_secrets=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip notice when secrets missing
        if: ${{ steps.check.outputs.has_secrets != 'true' }}
        run: |
          echo "Skipping server logs: required secrets not configured."

      - name: Show service status and last logs
        if: ${{ steps.check.outputs.has_secrets == 'true' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: PROJECT_DIR
          script: |
            set -eo pipefail
            cd "${PROJECT_DIR}"
            echo "==> docker compose ps"
            docker compose ps || true
            echo
            echo "==> app logs (tail)"
            docker compose logs --since='${{ github.event.inputs.since || "10m" }}' --tail='${{ github.event.inputs.tail || 400 }}' app || true
            echo
            echo "==> postgres logs (tail)"
            docker compose logs --since='${{ github.event.inputs.since || "10m" }}' --tail='${{ github.event.inputs.tail || 200 }}' postgres || true
