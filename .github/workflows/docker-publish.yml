name: Docker Build and Push

on:
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - "Dockerfile"
      - "package.json"
      - "package-lock.json"
      - "src/**"
      - "public/**"
      - "prisma/**"
      - "next.config.ts"
      - "tsconfig.json"
      - "!**/*.md"
      - "!.github/**"
      - "!docs/**"
  pull_request:
    branches:
      - main
    paths:
      - "Dockerfile"
      - "package.json"
      - "package-lock.json"
      - "src/**"
      - "public/**"
      - "prisma/**"
      - "next.config.ts"
      - "tsconfig.json"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: docker-build-${{ github.ref }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      # Required to upload SARIF to Code Scanning
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Fast single-arch build for PRs and non-main branches (no push)
      - name: Build (single-arch, no push)
        if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          provenance: false

      # Push single-arch on main (fast)
      - name: Build and push (single-arch main)
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          provenance: false

      # Multi-arch only on tags (release)
      - name: Build and push (multi-arch tags)
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          provenance: false

      # Run Trivy vulnerability scanner on tags only
      - name: Run Trivy vulnerability scanner (tags only)
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"
          exit-code: "1"

      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request' && !github.event.repository.private
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # Always keep a copy as artifact so结果可下载查看
      - name: Upload Trivy SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results.sarif
          path: trivy-results.sarif
          if-no-files-found: ignore

      # Removed duplicate table scan to save time; severity handled above
