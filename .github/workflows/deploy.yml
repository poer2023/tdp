name: Auto Deploy

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    concurrency: deploy-${{ github.ref }}
    env:
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      PROJECT_DIR: ${{ secrets.PROJECT_DIR }}
      GIT_URL: ${{ github.server_url }}/${{ github.repository }}.git
      BRANCH: main

    steps:
      - name: Check required deploy secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=()
          [[ -n "${SSH_HOST:-}" ]] || missing+=(SSH_HOST)
          [[ -n "${SSH_USER:-}" ]] || missing+=(SSH_USER)
          [[ -n "${{ secrets.SSH_KEY }}" ]] || missing+=(SSH_KEY)
          [[ -n "${PROJECT_DIR:-}" ]] || missing+=(PROJECT_DIR)
          if (( ${#missing[@]} > 0 )); then
            echo "Missing required secrets: ${missing[*]}" >&2
            echo "Add them in Settings → Secrets and variables → Actions." >&2
            exit 1
          fi

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: GHCR_USERNAME,GHCR_TOKEN,GIT_URL,BRANCH,PROJECT_DIR
          script: |
            # Be strict on errors but do not fail on unset vars to simplify secret handling
            set -eo pipefail
            echo "DEBUG: BRANCH=${BRANCH:-} PROJECT_DIR=${PROJECT_DIR:-} GHCR_USER_SET=$([ -n "${GHCR_USERNAME:-}" ] && echo 1 || echo 0) GHCR_TOKEN_SET=$([ -n "${GHCR_TOKEN:-}" ] && echo 1 || echo 0)"

            # Ensure Docker and Compose exist
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker is not installed on the server. Please install Docker and the compose plugin." >&2
              exit 1
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "Docker Compose plugin not found. Please install docker-compose-plugin." >&2
              exit 1
            fi

            # First-time setup: clone repository if PROJECT_DIR is not a git repo
            if [ ! -d "${PROJECT_DIR}/.git" ]; then
              echo "==> First-time setup: cloning repo into ${PROJECT_DIR}"
              if [ -d "${PROJECT_DIR}" ] && [ "$(ls -A "${PROJECT_DIR}" 2>/dev/null | wc -l)" -gt 0 ]; then
                echo "Directory exists and is not empty. Backing up to ${PROJECT_DIR}.bak-$(date +%s)"
                mv "${PROJECT_DIR}" "${PROJECT_DIR}.bak-$(date +%s)"
              fi
              mkdir -p "${PROJECT_DIR}"
              git clone --depth 1 --branch "${BRANCH}" "${GIT_URL}" "${PROJECT_DIR}"
            fi

            cd "${PROJECT_DIR}"
            # Ensure origin URL is correct and sync to remote HEAD robustly
            if git rev-parse --git-dir >/dev/null 2>&1; then
              git remote set-url origin "${GIT_URL}" || true
              git fetch origin "${BRANCH}" --depth 1 || true
              git checkout -B "${BRANCH}" "origin/${BRANCH}" 2>/dev/null || git checkout "${BRANCH}" || true
              git reset --hard "origin/${BRANCH}" || true
            fi

            # Login to GHCR if credentials are provided (for private images)
            if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_TOKEN:-}" ]; then
              echo "==> Logging into GHCR"
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            else
              echo "==> Skipping GHCR login (using public images or pre-authenticated daemon)"
            fi

            echo "==> Pulling latest Docker images"
            docker compose pull

            echo "==> Restarting services"
            docker compose up -d

            echo "==> Waiting for services to start..."
            sleep 60

            echo "==> Checking service health"
            if docker compose ps | grep -q "healthy"; then
              echo "✅ Deployment successful - services are healthy"
            else
              echo "❌ Deployment may have issues - checking service status:"
              docker compose ps || true
              docker compose logs --tail=50 || true
              exit 1
            fi

            echo "==> Cleaning up unused images"
            docker image prune -f || true

  notification:
    name: Deploy Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          {
            echo "# ✅ Deploy Succeeded";
            echo;
            echo "- Host: ${SSH_HOST:-unknown}";
            echo "- Service: tdp-app (port 3000)";
            echo;
            echo "Try opening: http://${SSH_HOST:-<server-ip>}:3000";
            echo;
            echo "Quick checks:";
            echo "- ssh USER@${SSH_HOST:-<server-ip>} 'docker compose ps'";
            echo "- ssh USER@${SSH_HOST:-<server-ip>} 'curl -fsS http://localhost:3000/api/health'";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the deployment logs and server status."
          {
            echo "# ❌ Deploy Failed";
            echo;
            echo "Host: ${SSH_HOST:-unknown}";
            echo;
            echo "Try on server:";
            echo "- docker compose ps";
            echo "- docker compose logs --tail=100 app";
            echo "- curl -v http://localhost:3000/api/health";
          } >> "$GITHUB_STEP_SUMMARY"
          exit 1
