generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model DailyStats {
  id             String   @id
  date           DateTime @unique
  totalViews     Int      @default(0)
  uniqueVisitors Int      @default(0)
  createdAt      DateTime @default(now())

  @@index([date])
}

model ExternalCredential {
  id              String             @id
  platform        CredentialPlatform
  type            CredentialType
  value           String
  metadata        Json?
  isValid         Boolean            @default(true)
  lastValidatedAt DateTime?
  validUntil      DateTime?
  failureCount    Int                @default(0)
  lastError       String?
  usageCount      Int                @default(0)
  lastUsedAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime
  autoSync        Boolean            @default(false)
  nextCheckAt     DateTime?
  syncFrequency   String?
  SyncJobLog      SyncJobLog[]

  @@index([lastValidatedAt])
  @@index([nextCheckAt])
  @@index([platform, isValid])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model GalleryImage {
  id                 String          @id
  title              String?
  description        String?
  filePath           String
  postId             String?
  createdAt          DateTime        @default(now())
  capturedAt         DateTime?
  city               String?
  country            String?
  fileSize           Int?
  height             Int?
  isLivePhoto        Boolean         @default(false)
  latitude           Float?
  livePhotoVideoPath String?
  locationName       String?
  longitude          Float?
  mimeType           String?
  storageType        String          @default("local")
  width              Int?
  mediumPath         String?
  microThumbPath     String?
  smallThumbPath     String?
  category           GalleryCategory @default(REPOST)
  Post               Post?           @relation(fields: [postId], references: [id])

  @@index([locationName(ops: raw("gin_trgm_ops"))], map: "idx_gallery_location_trgm", type: Gin)
  @@index([title(ops: raw("gin_trgm_ops"))], map: "idx_gallery_title_trgm", type: Gin)
}

model Game {
  id              String            @id
  platformId      String
  platform        GamePlatform
  name            String
  nameZh          String?
  cover           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  GameAchievement GameAchievement[]
  GameSession     GameSession[]

  @@unique([platform, platformId])
  @@index([platform])
}

model GameAchievement {
  id            String    @id
  gameId        String
  achievementId String
  name          String
  nameZh        String?
  description   String?
  unlockedAt    DateTime?
  progress      Float?
  isUnlocked    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, achievementId])
  @@index([gameId])
  @@index([isUnlocked])
}

model GameSession {
  id        String       @id
  gameId    String
  startTime DateTime
  endTime   DateTime?
  duration  Int
  platform  GamePlatform
  hoyoLevel Int?
  hoyoMode  String?
  createdAt DateTime     @default(now())
  Game      Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId, startTime])
  @@index([platform, startTime])
  @@index([startTime])
}

model GamingSyncLog {
  id         String        @id
  platform   GamePlatform
  status     SyncJobStatus @default(PENDING)
  message    String?
  errorStack String?
  syncedAt   DateTime      @default(now())
  duration   Int?

  @@index([platform, syncedAt])
  @@index([status])
}

model HoyoProfile {
  id         String   @id
  uid        String   @unique
  nickname   String
  level      Int
  loginDays  Int?
  lastSyncAt DateTime
  region     String   @default("cn_gf01")
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model MediaWatch {
  id                String              @id
  platform          String
  externalId        String
  type              String
  title             String
  cover             String?
  url               String?
  watchedAt         DateTime
  progress          Int?
  season            Int?
  episode           Int?
  rating            Int?
  duration          Int?
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  MediaWatchSyncLog MediaWatchSyncLog[]

  @@unique([platform, externalId])
  @@index([platform, watchedAt])
  @@index([watchedAt])
}

model MediaWatchSyncLog {
  id           String     @id
  mediaWatchId String
  syncJobLogId String
  syncedAt     DateTime   @default(now())
  MediaWatch   MediaWatch @relation(fields: [mediaWatchId], references: [id], onDelete: Cascade)
  SyncJobLog   SyncJobLog @relation(fields: [syncJobLogId], references: [id], onDelete: Cascade)

  @@unique([mediaWatchId, syncJobLogId])
  @@index([mediaWatchId])
  @@index([syncJobLogId])
  @@index([syncedAt])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Moment {
  id           String           @id
  authorId     String
  content      String
  images       Json?
  visibility   MomentVisibility @default(PUBLIC)
  slug         String?          @unique
  tags         String[]
  location     Json?
  lang         String           @default("en-US")
  status       MomentStatus     @default(PUBLISHED)
  scheduledAt  DateTime?
  replyToId    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  User         User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Moment       Moment?          @relation("MomentToMoment", fields: [replyToId], references: [id])
  other_Moment Moment[]         @relation("MomentToMoment")

  @@index([createdAt, visibility, lang])
  @@index([status])
  @@index([content(ops: raw("gin_trgm_ops"))], map: "idx_moment_content_trgm", type: Gin)
}

model PageView {
  id        String   @id
  path      String
  locale    String?
  referer   String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([path])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Post {
  id                String             @id
  title             String
  slug              String
  excerpt           String
  content           String
  coverImagePath    String?
  tags              String?
  status            PostStatus         @default(DRAFT)
  publishedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  authorId          String?
  locale            PostLocale         @default(EN)
  groupId           String?
  viewCount         Int                @default(0)
  relatedPostIds    Json?
  GalleryImage      GalleryImage[]
  User              User?              @relation(fields: [authorId], references: [id])
  PostAlias         PostAlias[]
  Reaction          Reaction[]
  ReactionAggregate ReactionAggregate?

  @@unique([groupId, locale])
  @@unique([locale, slug])
  @@index([status, locale])
  @@index([viewCount])
  @@index([content(ops: raw("gin_trgm_ops"))], map: "idx_post_content_trgm", type: Gin)
  @@index([title(ops: raw("gin_trgm_ops"))], map: "idx_post_title_trgm", type: Gin)
}

model PostAlias {
  id        String     @id
  locale    PostLocale
  oldSlug   String
  postId    String
  createdAt DateTime   @default(now())
  Post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([locale, oldSlug])
  @@index([postId])
}

model RateLimitHit {
  id        String   @id
  key       String
  createdAt DateTime @default(now())

  @@index([key, createdAt])
}

model Reaction {
  id             String   @id
  postId         String
  sessionKeyHash String
  createdAt      DateTime @default(now())
  Post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, sessionKeyHash])
  @@index([sessionKeyHash])
}

model ReactionAggregate {
  postId    String   @id
  likeCount Int      @default(0)
  updatedAt DateTime
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SteamProfile {
  id          String   @id
  steamId     String   @unique
  personaName String
  profileUrl  String?
  avatar      String?
  lastSyncAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Subscription {
  id                String                   @id
  userId            String
  name              String
  currency          String
  amount            Decimal                  @db.Decimal(14, 2)
  amountCNY         Decimal                  @db.Decimal(14, 2)
  billingCycle      SubscriptionBillingCycle @default(MONTHLY)
  startDate         DateTime
  endDate           DateTime?
  notes             String?
  originalRateToCNY Decimal?                 @db.Decimal(18, 8)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime
  User              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, billingCycle])
}

model SyncJob {
  id           String        @id
  platform     String
  status       SyncJobStatus @default(PENDING)
  startedAt    DateTime      @default(now())
  completedAt  DateTime?
  duration     Int?
  itemsTotal   Int           @default(0)
  itemsSuccess Int           @default(0)
  itemsFailed  Int           @default(0)
  errorMessage String?
  errorStack   String?
  triggeredBy  String        @default("cron")

  @@index([platform, startedAt])
  @@index([status])
}

model SyncJobLog {
  id                 String              @id
  platform           String
  jobType            String?
  triggeredBy        String              @default("system")
  status             SyncJobStatus       @default(PENDING)
  startedAt          DateTime?
  completedAt        DateTime?
  duration           Int?
  itemsTotal         Int                 @default(0)
  itemsSuccess       Int                 @default(0)
  itemsFailed        Int                 @default(0)
  message            String?
  errorStack         String?
  errorDetails       Json?
  credentialId       String?
  metrics            Json?
  createdAt          DateTime            @default(now())
  MediaWatchSyncLog  MediaWatchSyncLog[]
  ExternalCredential ExternalCredential? @relation(fields: [credentialId], references: [id])

  @@index([credentialId])
  @@index([platform, startedAt])
  @@index([status, startedAt])
  @@index([triggeredBy, createdAt])
}

model SyncStatistics {
  id                 String   @id
  platform           String
  date               DateTime @db.Date
  totalJobs          Int      @default(0)
  successJobs        Int      @default(0)
  failedJobs         Int      @default(0)
  partialJobs        Int      @default(0)
  avgDuration        Int?
  minDuration        Int?
  maxDuration        Int?
  totalItems         Int      @default(0)
  successItems       Int      @default(0)
  failedItems        Int      @default(0)
  credentialFailures Int      @default(0)
  updatedAt          DateTime

  @@unique([platform, date])
  @@index([date])
  @@index([platform, date])
}

model User {
  id            String         @id
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(AUTHOR)
  Account       Account[]
  Moment        Moment[]
  Post          Post[]
  Session       Session[]
  Subscription  Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Visitor {
  id          String   @id
  fingerprint String   @unique
  firstVisit  DateTime @default(now())
  lastVisit   DateTime
  visitCount  Int      @default(1)

  @@index([fingerprint])
  @@index([lastVisit])
}

enum CredentialPlatform {
  STEAM
  HOYOVERSE
  BILIBILI
  DOUBAN
  JELLYFIN
  GITHUB
}

enum CredentialType {
  COOKIE
  API_KEY
  OAUTH_TOKEN
  PERSONAL_ACCESS_TOKEN
}

enum GalleryCategory {
  REPOST
  ORIGINAL
  AI
}

enum GamePlatform {
  STEAM
  HOYOVERSE
  PSN
  XBOX
  SWITCH
}

enum MomentStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum MomentVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum PostLocale {
  EN
  ZH
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum SubscriptionBillingCycle {
  MONTHLY
  ANNUAL
  ONE_TIME
}

enum SyncJobStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  PARTIAL
}

enum UserRole {
  ADMIN
  AUTHOR
  READER
}
