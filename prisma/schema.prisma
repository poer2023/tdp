generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(AUTHOR)
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String             @id @default(cuid())
  title           String
  slug            String
  excerpt         String
  content         String
  coverImagePath  String?
  tags            String?
  status          PostStatus         @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  authorId        String?
  locale          PostLocale         @default(EN)
  groupId         String?
  gallery         GalleryImage[]
  author          User?              @relation(fields: [authorId], references: [id])
  aliases         PostAlias[]
  reactionRecords Reaction[]
  reactions       ReactionAggregate?

  @@unique([locale, slug])
  @@unique([groupId, locale])
  @@index([status, locale])
}

model PostAlias {
  id        String     @id @default(cuid())
  locale    PostLocale
  oldSlug   String
  postId    String
  createdAt DateTime   @default(now())
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([locale, oldSlug])
  @@index([postId])
}

model ReactionAggregate {
  postId    String   @id
  likeCount Int      @default(0)
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Reaction {
  id             String   @id @default(cuid())
  postId         String
  sessionKeyHash String
  createdAt      DateTime @default(now())
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, sessionKeyHash])
  @@index([sessionKeyHash])
}


model GalleryImage {
  id                 String    @id @default(cuid())
  title              String?
  description        String?
  filePath           String
  microThumbPath     String?
  smallThumbPath     String?
  mediumPath         String?
  postId             String?
  createdAt          DateTime  @default(now())
  capturedAt         DateTime?
  city               String?
  country            String?
  fileSize           Int?
  height             Int?
  isLivePhoto        Boolean   @default(false)
  latitude           Float?
  livePhotoVideoPath String?
  locationName       String?
  longitude          Float?
  mimeType           String?
  storageType        String    @default("local")
  width              Int?
  post               Post?     @relation(fields: [postId], references: [id])
}

enum UserRole {
  ADMIN
  AUTHOR
  READER
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum PostLocale {
  EN
  ZH
}
